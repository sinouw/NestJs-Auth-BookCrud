var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.12,1,1.894]],["body/controllers/AppController.html",[0,1.926,1,3.258,2,1.785,3,0.467,4,0.467,5,0.396,6,3.618,7,0.467,8,0.037,9,0.792,10,0.467,11,0.027,12,1.785,13,0.027,14,0.032,15,0.027]],["title/modules/AppModule.html",[16,1.12,17,1.894]],["body/modules/AppModule.html",[1,2.805,2,1.589,3,0.298,4,0.298,5,0.253,7,0.578,8,0.038,9,0.506,10,0.298,11,0.017,13,0.017,14,0.024,15,0.017,16,1.659,17,3.628,18,1.259,19,1.259,20,1.556,21,1.556,22,1.259,23,2.169,24,1.556,25,2.31,26,2.31,27,2.942,28,2.942,29,2.564,30,2.169,31,1.556,32,1.556,33,2.798,34,3.191,35,2.798,36,2.798,37,1.988,38,1.396,39,1.988,40,1.887,41,2.798,42,2.798,43,2.798,44,2.31,45,1.033,46,2.798,47,2.798,48,2.798,49,1.259,50,2.31,51,2.798,52,2.798,53,2.798,54,1.033,55,1.748,56,2.31,57,3.901,58,2.798,59,2.798]],["title/modules/AuthModule.html",[16,1.12,27,1.686]],["body/modules/AuthModule.html",[2,1.499,3,0.275,4,0.275,5,0.233,7,0.604,8,0.038,9,0.466,10,0.275,11,0.016,13,0.016,14,0.023,15,0.016,16,1.586,18,1.16,19,1.16,20,1.433,21,1.433,22,1.16,23,2.388,24,2.388,27,3.21,29,2.387,30,2.047,31,1.433,32,1.433,34,3.051,37,1.831,38,1.286,39,1.831,40,1.73,44,2.127,45,0.952,50,2.127,60,2.127,61,2.577,62,2.127,63,2.127,64,2.308,65,2.755,66,2.755,67,2.577,68,2.143,69,2.127,70,2.577,71,1.16,72,2.577,73,2.577,74,1.831,75,2.577,76,2.577,77,2.047,78,1.61,79,1.831,80,2.127,81,0.642,82,0.864,83,2.127,84,2.577,85,2.577,86,1.831,87,2.577,88,2.577,89,2.577,90,2.577,91,2.577,92,2.577,93,2.577]],["title/injectables/AuthService.html",[64,1.235,94,0.922]],["body/injectables/AuthService.html",[3,0.219,4,0.219,5,0.186,7,0.506,8,0.038,9,0.372,10,0.219,11,0.013,12,1.271,13,0.028,14,0.019,15,0.013,38,1.028,45,1.924,54,1.756,64,1.271,74,1.464,78,1.287,81,1.048,82,1.655,94,0.949,95,1.028,96,1.7,97,0.292,98,0.949,99,2.677,100,2.218,101,3.121,102,2.06,103,4.754,104,3.768,105,3.471,106,1.048,107,2.06,108,1.278,109,0.675,110,1.278,111,3.121,112,2.06,113,0.927,114,1.146,115,3.378,116,3.121,117,2.06,118,3.121,119,2.512,120,2.06,121,2.098,122,2.576,123,2.06,124,1.7,125,0.927,126,1.95,127,1.736,128,1.046,129,2.06,130,3.121,131,1.7,132,1.514,133,2.626,134,2.06,135,1.7,136,2.822,137,2.06,138,0.847,139,2.06,140,2.06,141,3.121,142,3.121,143,3.121,144,2.06,145,1.464,146,0.939,147,2.06,148,2.06,149,2.06,150,2.06,151,2.06,152,1.464,153,3.121,154,2.06,155,2.06,156,2.06,157,1.464,158,3.121,159,2.06,160,2.06,161,2.06,162,1.464,163,2.06,164,3.121,165,3.121,166,1.7,167,2.06,168,2.06,169,2.06,170,2.06,171,2.06]],["title/interfaces/Book.html",[172,1.365,173,1.365]],["body/interfaces/Book.html",[3,0.321,4,0.321,5,0.272,7,0.437,8,0.038,10,0.497,11,0.025,13,0.019,14,0.025,15,0.019,49,1.847,54,2.229,97,0.426,109,0.889,125,1.847,128,1.68,132,1.009,138,0.677,172,1.355,173,1.847,174,2.139,175,1.88,176,2.281,177,2.787,178,3.845,179,3.726,180,3.845,181,3.852,182,2.485,183,3.387,184,2.139,185,1.674,186,1.674,187,1.674,188,2.281,189,1.674,190,1.355,191,1.88,192,1.502]],["title/controllers/BookController.html",[0,1.12,193,1.894]],["body/controllers/BookController.html",[0,0.508,2,0.561,3,0.147,4,0.147,5,0.303,7,0.47,8,0.038,9,0.249,10,0.147,11,0.008,13,0.018,14,0.014,15,0.008,40,1.068,45,2.062,55,0.86,79,0.978,81,1.1,97,0.195,98,0.69,106,1.1,108,1.341,109,0.364,110,1.341,114,1.341,122,1.136,132,1.532,133,2.755,135,2.769,136,2.096,138,0.754,146,1.139,173,0.62,192,1.674,193,1.417,194,1.136,195,1.136,196,2.268,197,1.873,198,2.268,199,2.268,200,2.268,201,2.268,202,2.268,203,2.268,204,1.377,205,2.893,206,2.755,207,2.268,208,1.377,209,5.294,210,1.377,211,4.209,212,2.268,213,1.377,214,1.377,215,2.268,216,1.377,217,1.377,218,2.268,219,1.377,220,1.377,221,1.377,222,1.377,223,1.377,224,2.268,225,1.377,226,1.377,227,3.355,228,2.268,229,1.377,230,1.377,231,2.318,232,1.377,233,1.377,234,2.268,235,1.377,236,1.377,237,1.136,238,0.86,239,1.377,240,1.377,241,0.86,242,1.377,243,1.873,244,1.377,245,0.978,246,1.377,247,2.268,248,1.132,249,1.136,250,0.978,251,0.687,252,1.377,253,1.377,254,0.978,255,1.377,256,1.377,257,2.268,258,2.769,259,2.268,260,0.978,261,1.377,262,1.377,263,2.268,264,2.268,265,1.377,266,1.873,267,2.268,268,4.523,269,2.268,270,1.377,271,3.355,272,1.377,273,3.355,274,1.377,275,1.377,276,1.377,277,1.377,278,1.377,279,2.268,280,1.377,281,1.377,282,1.377,283,3.355,284,3.355,285,2.268,286,2.893,287,1.377,288,1.377,289,1.377,290,1.377,291,1.377,292,1.377,293,1.377,294,0.978,295,1.377,296,1.377,297,1.377,298,1.377,299,1.377,300,1.377,301,1.377,302,1.377,303,1.377,304,1.377,305,1.377,306,1.377,307,1.377,308,1.377,309,1.377,310,1.136,311,1.377,312,1.377,313,1.377,314,1.377,315,1.377,316,1.377]],["title/modules/BookModule.html",[16,1.12,28,1.686]],["body/modules/BookModule.html",[2,1.762,3,0.347,4,0.347,5,0.294,7,0.59,8,0.038,9,0.589,10,0.347,11,0.02,13,0.02,14,0.027,15,0.02,16,1.794,18,1.466,19,1.466,20,1.811,21,1.811,22,1.466,23,2.701,24,1.811,28,3.191,29,2.492,30,2.406,31,1.811,32,1.811,34,3.074,37,2.314,38,1.625,39,2.314,80,2.689,81,0.812,83,2.689,173,1.466,185,2.406,193,3.034,248,2.763,249,2.689,250,2.314,317,2.689,318,3.257,319,2.689,320,3.257,321,3.257]],["title/injectables/BookService.html",[94,0.922,248,1.513]],["body/injectables/BookService.html",[3,0.224,4,0.224,5,0.19,7,0.453,8,0.038,9,0.38,10,0.224,11,0.013,12,0.856,13,0.032,14,0.02,15,0.013,38,1.049,45,2.134,49,0.946,81,1.194,94,0.964,95,1.049,97,0.298,98,0.964,105,3.955,106,1.24,108,1.457,109,0.613,110,1.457,114,1.457,115,3.904,124,1.736,125,0.946,127,1.169,128,0.705,131,1.736,132,1.606,133,2.993,138,0.473,146,1.194,173,0.946,192,1.049,197,2.617,211,3.507,231,2.847,241,1.313,243,1.736,248,1.582,250,1.494,258,1.736,266,1.736,268,3.763,310,1.736,322,1.736,323,3.17,324,3.17,325,4.248,326,3.17,327,3.17,328,2.103,329,2.103,330,3.17,331,2.103,332,3.17,333,2.103,334,3.17,335,2.103,336,2.103,337,3.17,338,2.103,339,3.17,340,2.103,341,2.103,342,2.103,343,3.17,344,3.17,345,2.103,346,2.103,347,2.103,348,2.103,349,2.103,350,2.103,351,2.103,352,2.103,353,3.17,354,2.103]],["title/modules/ConfigModule.html",[16,1.12,29,1.365]],["body/modules/ConfigModule.html",[3,0.39,4,0.39,5,0.331,7,0.497,8,0.038,9,0.662,10,0.39,11,0.023,13,0.023,14,0.029,15,0.023,16,1.898,18,1.648,19,1.648,20,2.036,21,2.036,22,1.648,23,2.596,24,2.858,29,2.516,30,2.596,31,2.036,32,2.036,40,2.172,138,0.823,355,3.023,356,3.023,357,3.662,358,3.662,359,3.662,360,3.662,361,3.662,362,3.662]],["title/classes/ConfigService.html",[11,0.019,40,1.12]],["body/classes/ConfigService.html",[3,0.361,4,0.361,5,0.306,7,0.473,8,0.037,10,0.361,11,0.021,12,1.381,13,0.021,14,0.027,15,0.021,40,1.64,54,2.138,81,1.107,97,0.48,98,1.35,106,1.235,108,1.35,109,0.796,110,1.35,114,1.031,127,2.755,128,1.66,146,0.845,176,2.47,363,1.692,364,2.799,365,4.954,366,4.442,367,4.442,368,3.39,369,4.442,370,4.442,371,3.39,372,3.39,373,4.442,374,4.442,375,3.39,376,3.39,377,3.39]],["title/classes/CreateBookDto.html",[11,0.019,192,1.513]],["body/classes/CreateBookDto.html",[3,0.329,4,0.329,5,0.279,7,0.445,8,0.038,10,0.504,11,0.026,13,0.019,14,0.026,15,0.019,49,1.88,54,2.165,97,0.438,106,1.041,109,0.85,125,1.88,128,1.698,132,1.036,138,0.695,172,1.392,173,1.392,175,1.931,176,2.323,177,1.719,178,3.761,179,2.968,180,3.761,181,4.183,182,2.552,183,3.448,184,2.197,185,1.719,186,1.719,187,1.719,188,2.323,189,1.719,190,1.392,191,1.931,192,2.085,206,2.609,363,1.543,378,3.092,379,3.092,380,3.092]],["title/classes/CreateUserDto.html",[11,0.019,113,1.365]],["body/classes/CreateUserDto.html",[3,0.25,4,0.25,5,0.212,7,0.366,8,0.038,10,0.434,11,0.014,13,0.014,14,0.021,15,0.014,49,1.832,54,2.157,77,1.304,82,1.364,97,0.332,106,1.117,109,0.828,113,1.548,119,2.866,121,2.382,125,1.548,126,2.148,128,1.957,132,0.786,138,0.527,145,2.443,146,1.117,162,1.666,172,1.056,176,1.912,177,1.304,186,1.304,187,1.304,188,1.912,189,1.304,190,1.056,191,1.465,363,1.17,381,1.465,382,3.391,383,3.391,384,2.346,385,2.346,386,2.346,387,2.346,388,1.666,389,1.936,390,2.443,391,3.36,392,1.936,393,1.936,394,1.936,395,1.936,396,1.936,397,1.936,398,3.36,399,1.936,400,3.36,401,1.936,402,1.936,403,3.544,404,2.838,405,1.936,406,1.936,407,1.936,408,1.936,409,1.936,410,2.838,411,1.936,412,1.936]],["title/classes/FallbackExceptionFilter.html",[11,0.019,413,2.154]],["body/classes/FallbackExceptionFilter.html",[3,0.356,4,0.356,5,0.302,7,0.469,8,0.037,9,0.604,10,0.356,11,0.021,13,0.021,14,0.027,15,0.021,81,0.833,97,0.473,98,1.337,106,0.833,108,1.016,109,0.536,110,1.016,114,1.016,132,1.648,138,0.751,146,0.833,152,3.714,157,2.374,238,2.087,254,2.374,363,1.667,413,3.494,414,2.758,415,3.631,416,4.06,417,3.631,418,4.06,419,4.315,420,3.341,421,2.758,422,2.748,423,3.631,424,2.758,425,2.758,426,2.758,427,2.758,428,3.341,429,3.341,430,3.341,431,2.758,432,2.758,433,4.399,434,3.341,435,3.341,436,2.758,437,2.758,438,2.758]],["title/classes/HttpExceptionFilter.html",[11,0.019,439,2.154]],["body/classes/HttpExceptionFilter.html",[3,0.349,4,0.349,5,0.296,7,0.463,8,0.038,9,0.593,10,0.349,11,0.02,13,0.02,14,0.027,15,0.02,81,0.818,97,0.465,98,1.322,106,0.818,108,0.997,109,0.527,110,0.997,114,0.997,132,1.739,138,0.738,146,0.818,152,3.463,238,2.049,254,2.331,363,1.637,415,3.588,416,4.024,417,3.588,418,4.024,419,4.284,421,2.708,422,2.715,423,3.588,424,2.708,425,2.708,426,2.708,427,2.708,431,2.708,432,2.708,436,2.708,437,2.708,438,2.708,439,3.463,440,2.708,441,4.284,442,3.281,443,3.281,444,4.875,445,3.281,446,3.281,447,3.281]],["title/injectables/JwtStrategy.html",[65,1.686,94,0.922]],["body/injectables/JwtStrategy.html",[3,0.346,4,0.346,5,0.293,7,0.551,8,0.038,9,0.586,10,0.346,11,0.02,12,1.322,13,0.02,14,0.027,15,0.02,40,1.909,45,1.791,55,2.027,56,3.563,65,2.4,71,1.461,79,2.306,81,1.076,86,2.306,94,1.312,95,1.62,97,0.46,98,1.312,106,1.076,108,1.312,109,0.693,110,1.312,114,0.987,121,1.62,146,0.809,166,2.679,177,1.805,190,1.461,448,2.679,449,3.563,450,3.246,451,3.246,452,4.316,453,3.246,454,3.246,455,2.679,456,2.306,457,2.679,458,2.679,459,2.679,460,3.246,461,3.246,462,3.246,463,3.246,464,3.246,465,3.246,466,3.246,467,3.246]],["title/injectables/LocalStrategy.html",[66,1.686,94,0.922]],["body/injectables/LocalStrategy.html",[3,0.333,4,0.333,5,0.282,7,0.542,8,0.038,9,0.564,10,0.333,11,0.019,12,1.272,13,0.019,14,0.026,15,0.019,45,1.757,54,2.021,55,1.951,64,2.228,66,2.339,69,2.578,71,1.406,81,1.049,82,1.594,94,1.279,95,1.559,97,0.442,98,1.279,106,1.049,108,1.279,109,0.676,110,1.279,114,0.95,115,2.989,119,2.83,121,1.559,128,1.047,132,1.047,133,1.951,136,1.951,138,0.702,146,0.779,190,1.406,449,3.472,455,2.578,456,2.219,457,2.578,458,2.578,459,2.578,468,2.578,469,3.124,470,3.124,471,4.207,472,3.124,473,2.578,474,4.207,475,3.124]],["title/injectables/MyAuthGuard.html",[94,0.922,251,1.513]],["body/injectables/MyAuthGuard.html",[3,0.575,4,0.387,5,0.328,7,0.495,8,0.037,9,0.656,10,0.387,11,0.022,13,0.022,14,0.029,15,0.022,71,1.635,81,0.906,82,1.809,94,1.412,95,1.813,97,0.514,98,1.412,106,0.906,108,1.105,109,0.583,110,1.105,114,1.105,136,2.269,138,0.817,146,0.906,157,3.638,190,1.635,251,2.318,403,2.581,441,2.999,476,2.999,477,4.645,478,4.645,479,3.633,480,2.581,481,3.633,482,3.633,483,3.633,484,3.633,485,3.633]],["title/interfaces/User.html",[82,1.016,172,1.365]],["body/interfaces/User.html",[3,0.251,4,0.251,5,0.212,7,0.367,8,0.038,10,0.434,11,0.014,13,0.014,14,0.021,15,0.014,49,1.835,54,2.211,77,1.308,82,1.504,97,0.333,109,0.849,113,1.058,119,2.941,121,2.491,125,1.551,126,2.152,128,1.809,132,0.788,138,0.529,145,2.448,146,1.119,162,1.671,172,1.058,174,1.671,176,1.916,177,2.496,186,1.308,187,1.308,188,1.916,189,1.308,190,1.058,191,1.469,381,1.469,382,3.547,383,3.547,388,1.671,389,1.941,390,2.448,391,3.365,392,1.941,393,1.941,394,1.941,395,1.941,396,1.941,397,1.941,398,3.365,399,1.941,400,3.365,401,1.941,402,1.941,403,3.547,404,2.844,405,1.941,406,1.941,407,1.941,408,1.941,409,1.941,410,2.844,411,1.941,412,1.941]],["title/controllers/authController.html",[0,1.12,68,1.513]],["body/controllers/authController.html",[0,1.417,2,1.113,3,0.291,4,0.291,5,0.247,7,0.539,8,0.038,9,0.494,10,0.291,11,0.017,12,1.113,13,0.017,14,0.024,15,0.017,45,1.939,64,1.806,68,1.914,71,1.229,78,1.706,81,1.105,82,1.285,97,0.387,98,1.166,99,2.725,100,2.725,106,1.105,108,1.348,109,0.439,110,1.348,113,2.164,114,1.348,127,1.519,128,0.915,146,1.105,195,2.255,206,2.769,231,1.706,241,2.769,245,1.941,251,1.363,260,1.941,294,3.416,422,1.706,480,1.941,486,1.941,487,2.731,488,3.166,489,2.255,490,3.166,491,2.255,492,2.255,493,2.255,494,2.255,495,2.255,496,2.255,497,2.255,498,2.255,499,2.255,500,2.255,501,3.166,502,2.255,503,2.255,504,2.255,505,2.255,506,2.255,507,2.255,508,2.255,509,2.255,510,2.255,511,2.255]],["title/controllers/authController-1.html",[0,0.938,68,1.267,512,2.539]],["body/controllers/authController-1.html",[0,1.423,2,1.119,3,0.293,4,0.293,5,0.248,7,0.541,8,0.038,9,0.496,10,0.293,11,0.017,12,1.119,13,0.017,14,0.024,15,0.017,45,1.943,64,1.812,68,1.922,71,1.237,78,1.716,81,1.109,82,1.291,97,0.389,98,1.171,99,2.737,100,2.737,106,1.109,108,1.352,109,0.441,110,1.352,113,2.169,114,1.352,127,1.528,128,0.921,146,1.109,206,2.778,231,1.716,241,2.778,245,1.952,251,1.371,260,1.952,294,3.425,422,1.716,480,1.952,486,1.952,488,3.179,489,2.268,490,3.179,491,2.268,492,2.268,493,2.268,494,2.268,495,2.268,496,2.268,497,2.268,498,2.268,499,2.268,500,2.268,501,3.179,502,2.268,503,2.268,504,2.268,505,2.268,506,2.268,507,2.268,508,2.268,509,2.268,510,2.268,511,2.268]],["title/coverage.html",[513,2.929]],["body/coverage.html",[0,1.826,1,1.82,5,0.263,6,2.406,8,0.037,11,0.032,13,0.018,14,0.025,15,0.018,22,1.312,40,1.076,64,1.187,65,1.621,66,1.621,68,2.002,77,1.621,82,0.977,94,1.576,96,2.406,109,0.468,113,1.312,138,0.655,172,1.806,173,1.312,175,2.866,185,1.621,192,1.454,193,1.82,194,2.406,248,1.454,251,1.454,322,2.406,364,2.406,381,2.866,390,2.071,413,2.071,414,2.406,439,2.071,440,2.406,448,2.406,468,2.406,476,2.406,486,2.851,513,2.071,514,2.914,515,2.914,516,2.914,517,6.054,518,4.944,519,4.589,520,4.589,521,4.589,522,4.589,523,2.914,524,2.914,525,2.406,526,4.012,527,2.914,528,2.914,529,2.914]],["title/dependencies.html",[19,1.639,530,2.539]],["body/dependencies.html",[8,0.038,9,0.641,11,0.028,13,0.022,14,0.028,15,0.022,19,1.597,38,1.771,71,1.597,74,2.521,86,2.521,125,1.597,126,2.216,184,2.521,237,2.929,238,2.216,456,3.801,473,2.929,531,5.064,532,3.548,533,3.548,534,3.548,535,4.575,536,3.548,537,3.548,538,3.548,539,3.548,540,3.548,541,3.548,542,3.548,543,3.548,544,3.548,545,3.548,546,3.548,547,3.548,548,3.548,549,3.548,550,3.548,551,3.548,552,3.548,553,3.548,554,3.548,555,3.548,556,3.548,557,3.548]],["title/miscellaneous/functions.html",[558,1.586,559,3.007]],["body/miscellaneous/functions.html",[8,0.033,13,0.028,14,0.033,15,0.028,22,2.558,97,0.652,525,3.8,558,2.875,559,3.8,560,4.603]],["title/index.html",[97,0.36,561,2.539,562,2.539]],["body/index.html",[8,0.038,13,0.024,14,0.03,15,0.024,513,2.745,563,3.863,564,5.879,565,3.863,566,3.863,567,3.863,568,5.795,569,3.863,570,3.863,571,4.829,572,3.863,573,3.863,574,3.863,575,3.863,576,4.829,577,4.829,578,3.863,579,3.863,580,3.863]],["title/modules.html",[18,1.856]],["body/modules.html",[8,0.032,13,0.027,14,0.032,15,0.027,17,2.699,18,1.945,27,2.402,28,2.402,29,1.945,581,5.736,582,5.736,583,5.736,584,5.736]],["title/overview.html",[585,3.403]],["body/overview.html",[2,1.286,8,0.037,13,0.019,14,0.026,15,0.019,16,1.166,17,3.643,18,1.42,19,1.42,20,1.755,21,1.755,22,1.42,23,1.755,24,1.755,25,2.605,26,2.605,27,3.295,28,3.117,29,2.523,30,2.355,31,1.755,32,1.755,40,1.887,60,2.605,62,2.605,63,2.605,64,2.283,65,2.659,66,2.659,95,1.575,174,2.242,248,2.386,317,2.605,319,2.605,355,2.605,356,2.605,363,1.575,585,2.605,586,4.236,587,4.236,588,3.156]],["title/miscellaneous/variables.html",[558,1.586,589,3.007]],["body/miscellaneous/variables.html",[8,0.038,13,0.021,14,0.027,15,0.021,49,2.456,54,2.107,77,2.47,97,0.48,109,0.899,119,1.885,121,1.692,138,0.999,175,2.118,178,2.409,179,2.409,180,2.409,185,2.47,186,2.47,187,2.47,188,3.114,189,2.47,381,2.118,382,2.409,383,2.409,388,2.409,558,2.118,589,2.799,590,3.39,591,3.39,592,4.442]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"interfaces/User.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":517,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":553,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":540,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":539,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":545,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":533,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":518,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":521,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":522,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":519,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":520,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":527,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":524,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":523,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":512,"title":{"controllers/authController-1.html":{}},"body":{}}],["1.0.0",{"_index":550,"title":{},"body":{"dependencies.html":{}}}],["11000",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["16)).tostring(16)).join",{"_index":299,"title":{},"body":{"controllers/BookController.html":{}}}],["2",{"_index":588,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":548,"title":{},"body":{"dependencies.html":{}}}],["3.0.0",{"_index":555,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":586,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":549,"title":{},"body":{"dependencies.html":{}}}],["401",{"_index":485,"title":{},"body":{"injectables/MyAuthGuard.html":{}}}],["5",{"_index":587,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":537,"title":{},"body":{"dependencies.html":{}}}],["5.8.10",{"_index":541,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":430,"title":{},"body":{"classes/FallbackExceptionFilter.html":{}}}],["6.1.1",{"_index":535,"title":{},"body":{"dependencies.html":{}}}],["6.10.14",{"_index":531,"title":{},"body":{"dependencies.html":{}}}],["6.3.1",{"_index":536,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":557,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":544,"title":{},"body":{"dependencies.html":{}}}],["_configservice",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{}}}],["_configservice.get('jwt_secret",{"_index":465,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["_id",{"_index":177,"title":{},"body":{"interfaces/Book.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"interfaces/User.html":{}}}],["access_token",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":279,"title":{},"body":{"controllers/BookController.html":{}}}],["adddocument",{"_index":196,"title":{},"body":{"controllers/BookController.html":{}}}],["adddocument(@res",{"_index":280,"title":{},"body":{"controllers/BookController.html":{}}}],["adddocument(res",{"_index":204,"title":{},"body":{"controllers/BookController.html":{}}}],["addnewdocument",{"_index":323,"title":{},"body":{"injectables/BookService.html":{}}}],["addnewdocument(body",{"_index":330,"title":{},"body":{"injectables/BookService.html":{}}}],["already",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["app",{"_index":566,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":17,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appmodule.port",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["argumentshost",{"_index":419,"title":{},"body":{"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["array(32).fill(null).map",{"_index":297,"title":{},"body":{"controllers/BookController.html":{}}}],["async",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["attempt",{"_index":407,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["auth",{"_index":487,"title":{},"body":{"controllers/authController.html":{}}}],["auth.controller",{"_index":76,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/profile",{"_index":508,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["auth/register",{"_index":501,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["authcontroller",{"_index":68,"title":{"controllers/authController.html":{},"controllers/authController-1.html":{}},"body":{"modules/AuthModule.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{},"coverage.html":{}}}],["authguard",{"_index":480,"title":{},"body":{"injectables/MyAuthGuard.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["authguard('jwt",{"_index":481,"title":{},"body":{"injectables/MyAuthGuard.html":{}}}],["authmodule",{"_index":27,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authservice",{"_index":64,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{},"coverage.html":{},"overview.html":{}}}],["authservice,localstrategy,jwtstrategy",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{}}}],["await",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"injectables/LocalStrategy.html":{}}}],["badrequestexception",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(\"wrong",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(`sorry",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/User.html":{},"dependencies.html":{}}}],["bcrypt.compare(attempt",{"_index":409,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["bcrypt.compare(password",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt(10",{"_index":402,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["bcrypt.hash(user.password",{"_index":405,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["body",{"_index":231,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["body(validationpipe",{"_index":281,"title":{},"body":{"controllers/BookController.html":{}}}],["body.imageurl",{"_index":304,"title":{},"body":{"controllers/BookController.html":{}}}],["book",{"_index":173,"title":{"interfaces/Book.html":{}},"body":{"interfaces/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"classes/CreateBookDto.html":{},"coverage.html":{}}}],["book.controller",{"_index":321,"title":{},"body":{"modules/BookModule.html":{}}}],["book.service",{"_index":249,"title":{},"body":{"controllers/BookController.html":{},"modules/BookModule.html":{}}}],["book/book.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["bookcontroller",{"_index":193,"title":{"controllers/BookController.html":{}},"body":{"controllers/BookController.html":{},"modules/BookModule.html":{},"coverage.html":{}}}],["bookmodule",{"_index":28,"title":{"modules/BookModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookModule.html":{},"modules.html":{},"overview.html":{}}}],["bookschema",{"_index":185,"title":{},"body":{"interfaces/Book.html":{},"modules/BookModule.html":{},"classes/CreateBookDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bookservice",{"_index":248,"title":{"injectables/BookService.html":{}},"body":{"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"coverage.html":{},"overview.html":{}}}],["bookservice,private",{"_index":256,"title":{},"body":{"controllers/BookController.html":{}}}],["boolean(_configservice.get('ignore_expiration",{"_index":463,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["bootstrap",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/ConfigModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":584,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":581,"title":{},"body":{"modules.html":{}}}],["callback",{"_index":408,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["callback(err",{"_index":411,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["callback(null",{"_index":412,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["catch",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":417,"title":{},"body":{"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":443,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["cb",{"_index":295,"title":{},"body":{"controllers/BookController.html":{}}}],["cb(null",{"_index":300,"title":{},"body":{"controllers/BookController.html":{}}}],["check",{"_index":345,"title":{},"body":{"injectables/BookService.html":{}}}],["checkexistancebyid",{"_index":324,"title":{},"body":{"injectables/BookService.html":{}}}],["checkexistancebyid(id",{"_index":332,"title":{},"body":{"injectables/BookService.html":{}}}],["checking",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":11,"title":{"classes/ConfigService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"interfaces/User.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":363,"title":{},"body":{"classes/ConfigService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":60,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":62,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":61,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":63,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_bookmodule",{"_index":317,"title":{},"body":{"modules/BookModule.html":{},"overview.html":{}}}],["cluster_bookmodule_imports",{"_index":318,"title":{},"body":{"modules/BookModule.html":{}}}],["cluster_bookmodule_providers",{"_index":319,"title":{},"body":{"modules/BookModule.html":{},"overview.html":{}}}],["cluster_configmodule",{"_index":355,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_configmodule_exports",{"_index":356,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["config.service",{"_index":358,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configmodule",{"_index":29,"title":{"modules/ConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/ConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["configservice",{"_index":40,"title":{"classes/ConfigService.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/BookController.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["configservice(`${process.env.node_env",{"_index":361,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('expires_in",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{}}}],["console.log('appmodule.port",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Book.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalStrategy.html":{},"interfaces/User.html":{}}}],["constructor",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BookService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["constructor(@injectmodel('book",{"_index":341,"title":{},"body":{"injectables/BookService.html":{}}}],["constructor(_configservice",{"_index":450,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(authservice",{"_index":469,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(filepath",{"_index":366,"title":{},"body":{"classes/ConfigService.html":{}}}],["constructor(jwtservice",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(model",{"_index":328,"title":{},"body":{"injectables/BookService.html":{}}}],["constructor(private",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"controllers/BookController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/BookController.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}},"body":{"controllers/AppController.html":{},"controllers/BookController.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{},"coverage.html":{}}}],["controller('auth",{"_index":500,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["controller('book",{"_index":255,"title":{},"body":{"controllers/BookController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{},"overview.html":{}}}],["core/config/config.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{}}}],["core/config/config.service",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["coverage",{"_index":513,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["create(@body",{"_index":506,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["create(createuserdto",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{}}}],["create(user",{"_index":489,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["createbookdto",{"_index":192,"title":{"classes/CreateBookDto.html":{}},"body":{"interfaces/Book.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"classes/CreateBookDto.html":{},"coverage.html":{}}}],["created",{"_index":285,"title":{},"body":{"controllers/BookController.html":{}}}],["createdby",{"_index":431,"title":{},"body":{"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["createdocumentdto",{"_index":227,"title":{},"body":{"controllers/BookController.html":{}}}],["createdto",{"_index":205,"title":{},"body":{"controllers/BookController.html":{}}}],["createuserdto",{"_index":113,"title":{"classes/CreateUserDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/User.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{},"coverage.html":{}}}],["ctx",{"_index":424,"title":{},"body":{"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":427,"title":{},"body":{"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":426,"title":{},"body":{"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["date().toisostring",{"_index":437,"title":{},"body":{"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["declarations",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/ConfigModule.html":{},"overview.html":{}}}],["decorators",{"_index":206,"title":{},"body":{"controllers/BookController.html":{},"classes/CreateBookDto.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["default",{"_index":188,"title":{},"body":{"interfaces/Book.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"classes/ConfigService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["delete",{"_index":243,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{}}}],["delete('delete/:id",{"_index":212,"title":{},"body":{"controllers/BookController.html":{}}}],["deleted",{"_index":316,"title":{},"body":{"controllers/BookController.html":{}}}],["deletedocument",{"_index":197,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{}}}],["deletedocument(@res",{"_index":314,"title":{},"body":{"controllers/BookController.html":{}}}],["deletedocument(id",{"_index":334,"title":{},"body":{"injectables/BookService.html":{}}}],["deletedocument(res",{"_index":210,"title":{},"body":{"controllers/BookController.html":{}}}],["deletedresult",{"_index":353,"title":{},"body":{"injectables/BookService.html":{}}}],["dependencies",{"_index":19,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/ConfigModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":178,"title":{},"body":{"interfaces/Book.html":{},"classes/CreateBookDto.html":{},"miscellaneous/variables.html":{}}}],["destination",{"_index":291,"title":{},"body":{"controllers/BookController.html":{}}}],["details",{"_index":310,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{}}}],["development",{"_index":567,"title":{},"body":{"index.html":{}}}],["development'}.env",{"_index":362,"title":{},"body":{"modules/ConfigModule.html":{}}}],["diskstorage",{"_index":234,"title":{},"body":{"controllers/BookController.html":{}}}],["document",{"_index":268,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{}}}],["document's",{"_index":309,"title":{},"body":{"controllers/BookController.html":{}}}],["documentation",{"_index":514,"title":{},"body":{"coverage.html":{}}}],["documentexists",{"_index":198,"title":{},"body":{"controllers/BookController.html":{}}}],["documentexists(@res",{"_index":275,"title":{},"body":{"controllers/BookController.html":{}}}],["documentexists(res",{"_index":214,"title":{},"body":{"controllers/BookController.html":{}}}],["documents",{"_index":258,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{}}}],["dotenv",{"_index":373,"title":{},"body":{"classes/ConfigService.html":{}}}],["dotenv.parse(fs.readfilesync(filepath",{"_index":376,"title":{},"body":{"classes/ConfigService.html":{}}}],["duplication",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["e",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["e2e",{"_index":578,"title":{},"body":{"index.html":{}}}],["edit",{"_index":350,"title":{},"body":{"injectables/BookService.html":{}}}],["envconfig",{"_index":365,"title":{},"body":{"classes/ConfigService.html":{}}}],["err",{"_index":403,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/MyAuthGuard.html":{},"interfaces/User.html":{}}}],["error",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"classes/FallbackExceptionFilter.html":{},"injectables/MyAuthGuard.html":{}}}],["errormessage",{"_index":432,"title":{},"body":{"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception",{"_index":421,"title":{},"body":{"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":445,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":433,"title":{},"body":{"classes/FallbackExceptionFilter.html":{}}}],["exception.message.message",{"_index":447,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":416,"title":{},"body":{"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exist",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{}}}],["exists",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookService.html":{}}}],["expiresin",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"interfaces/User.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["exports",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/ConfigModule.html":{},"overview.html":{}}}],["express",{"_index":238,"title":{},"body":{"controllers/BookController.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":190,"title":{},"body":{"interfaces/Book.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"interfaces/User.html":{}}}],["extname",{"_index":253,"title":{},"body":{"controllers/BookController.html":{}}}],["extractjwt",{"_index":454,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":461,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fallbackexceptionfilter",{"_index":413,"title":{"classes/FallbackExceptionFilter.html":{}},"body":{"classes/FallbackExceptionFilter.html":{},"coverage.html":{}}}],["false",{"_index":277,"title":{},"body":{"controllers/BookController.html":{}}}],["fetch",{"_index":266,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"interfaces/User.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{},"coverage.html":{}}}],["file,@body",{"_index":303,"title":{},"body":{"controllers/BookController.html":{}}}],["file.path",{"_index":306,"title":{},"body":{"controllers/BookController.html":{}}}],["fileinterceptor",{"_index":236,"title":{},"body":{"controllers/BookController.html":{}}}],["filename",{"_index":293,"title":{},"body":{"controllers/BookController.html":{}}}],["filepath",{"_index":368,"title":{},"body":{"classes/ConfigService.html":{}}}],["findbyidandupdate(id",{"_index":352,"title":{},"body":{"injectables/BookService.html":{}}}],["firstname",{"_index":382,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["found",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["fs",{"_index":374,"title":{},"body":{"classes/ConfigService.html":{}}}],["function",{"_index":390,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["functions",{"_index":559,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":397,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["generation",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(':id",{"_index":224,"title":{},"body":{"controllers/BookController.html":{}}}],["get('check/:id",{"_index":215,"title":{},"body":{"controllers/BookController.html":{}}}],["get('getall",{"_index":218,"title":{},"body":{"controllers/BookController.html":{}}}],["get('getallwithpermission",{"_index":261,"title":{},"body":{"controllers/BookController.html":{}}}],["get('profile",{"_index":509,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["get(key",{"_index":370,"title":{},"body":{"classes/ConfigService.html":{}}}],["getall",{"_index":325,"title":{},"body":{"injectables/BookService.html":{}}}],["getalldocument",{"_index":199,"title":{},"body":{"controllers/BookController.html":{}}}],["getalldocument(@res",{"_index":265,"title":{},"body":{"controllers/BookController.html":{}}}],["getalldocument(res",{"_index":217,"title":{},"body":{"controllers/BookController.html":{}}}],["getalldocumentwithpermission",{"_index":200,"title":{},"body":{"controllers/BookController.html":{}}}],["getalldocumentwithpermission(@res",{"_index":262,"title":{},"body":{"controllers/BookController.html":{}}}],["getalldocumentwithpermission(res",{"_index":220,"title":{},"body":{"controllers/BookController.html":{}}}],["getbyid",{"_index":326,"title":{},"body":{"injectables/BookService.html":{}}}],["getbyid(id",{"_index":337,"title":{},"body":{"injectables/BookService.html":{}}}],["getdocument",{"_index":201,"title":{},"body":{"controllers/BookController.html":{}}}],["getdocument(@res",{"_index":270,"title":{},"body":{"controllers/BookController.html":{}}}],["getdocument(res",{"_index":223,"title":{},"body":{"controllers/BookController.html":{}}}],["getprofile",{"_index":488,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["getprofile(@request",{"_index":510,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["getprofile(req",{"_index":492,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["getting",{"_index":561,"title":{"index.html":{}},"body":{}}],["google",{"_index":546,"title":{},"body":{"dependencies.html":{}}}],["guard/auth.guard",{"_index":499,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["handlerequest",{"_index":477,"title":{},"body":{"injectables/MyAuthGuard.html":{}}}],["handlerequest(err",{"_index":478,"title":{},"body":{"injectables/MyAuthGuard.html":{}}}],["hash",{"_index":400,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["hashed",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["host",{"_index":418,"title":{},"body":{"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":425,"title":{},"body":{"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexception",{"_index":441,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/MyAuthGuard.html":{}}}],["httpexception(info.message",{"_index":484,"title":{},"body":{"injectables/MyAuthGuard.html":{}}}],["httpexceptionfilter",{"_index":439,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpstatus",{"_index":239,"title":{},"body":{"controllers/BookController.html":{}}}],["id",{"_index":211,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{}}}],["identifier",{"_index":515,"title":{},"body":{"coverage.html":{}}}],["if(!user",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(e.code",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(info",{"_index":482,"title":{},"body":{"injectables/MyAuthGuard.html":{}}}],["ignoreexpiration",{"_index":462,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":287,"title":{},"body":{"controllers/BookController.html":{}}}],["imageurl",{"_index":179,"title":{},"body":{"interfaces/Book.html":{},"classes/CreateBookDto.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":415,"title":{},"body":{"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"interfaces/User.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["imports",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{}}}],["index",{"_index":97,"title":{"index.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/Book.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"classes/ConfigService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"interfaces/User.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"interfaces/User.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["inject",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["injectable",{"_index":94,"title":{"injectables/AuthService.html":{},"injectables/BookService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BookService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"overview.html":{}}}],["injectmodel",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookService.html":{}}}],["injectmodel('user",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["installation",{"_index":563,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":565,"title":{},"body":{"index.html":{}}}],["interface",{"_index":172,"title":{"interfaces/Book.html":{},"interfaces/User.html":{}},"body":{"interfaces/Book.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["interfaces",{"_index":174,"title":{},"body":{"interfaces/Book.html":{},"interfaces/User.html":{},"overview.html":{}}}],["isemail",{"_index":182,"title":{},"body":{"interfaces/Book.html":{},"classes/CreateBookDto.html":{}}}],["ismatch",{"_index":410,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["isnotempty",{"_index":183,"title":{},"body":{"interfaces/Book.html":{},"classes/CreateBookDto.html":{}}}],["isstring",{"_index":181,"title":{},"body":{"interfaces/Book.html":{},"classes/CreateBookDto.html":{}}}],["isstring()@isnotempty",{"_index":379,"title":{},"body":{"classes/CreateBookDto.html":{}}}],["jwt",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt/jwt.strategy",{"_index":75,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt/local.strategy",{"_index":72,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":460,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":73,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":65,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":372,"title":{},"body":{"classes/ConfigService.html":{}}}],["keys",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["lastname",{"_index":383,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/ConfigModule.html":{},"overview.html":{}}}],["list",{"_index":259,"title":{},"body":{"controllers/BookController.html":{}}}],["local",{"_index":473,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localstrategy",{"_index":66,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["login(@request",{"_index":504,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["login(req",{"_index":495,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["login(user",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{}}}],["looks",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["make",{"_index":392,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["match",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["matches",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"interfaces/User.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["math.round(math.random",{"_index":298,"title":{},"body":{"controllers/BookController.html":{}}}],["message",{"_index":284,"title":{},"body":{"controllers/BookController.html":{}}}],["metadata",{"_index":552,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"classes/ConfigService.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["miscellaneous",{"_index":558,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":571,"title":{},"body":{"index.html":{}}}],["model",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookService.html":{}}}],["module",{"_index":16,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/ConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/ConfigModule.html":{},"overview.html":{}}}],["modules",{"_index":18,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/ConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb+srv://${configservice.get('db_user')}:${configservice.get('db_pwd')}@${configservice.get('db_uri')}/${configservice.get('db_name')}?${configservice.get('db_params",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoose",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Book.html":{},"injectables/BookService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"interfaces/User.html":{},"dependencies.html":{}}}],["mongoose.document",{"_index":191,"title":{},"body":{"interfaces/Book.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["mongoose.schema",{"_index":186,"title":{},"body":{"interfaces/Book.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["mongoosemodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{}}}],["mongoosemodule.forfeature",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{},"modules/BookModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["multer",{"_index":235,"title":{},"body":{"controllers/BookController.html":{}}}],["myauthguard",{"_index":251,"title":{"injectables/MyAuthGuard.html":{}},"body":{"controllers/BookController.html":{},"injectables/MyAuthGuard.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{},"coverage.html":{}}}],["name",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"classes/ConfigService.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["nestjs",{"_index":542,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"modules/ConfigModule.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":532,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":534,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":74,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":237,"title":{},"body":{"controllers/BookController.html":{},"dependencies.html":{}}}],["new",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Book.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"modules/ConfigModule.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"interfaces/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newresult",{"_index":347,"title":{},"body":{"injectables/BookService.html":{}}}],["newresult.save",{"_index":349,"title":{},"body":{"injectables/BookService.html":{}}}],["newuser",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.save",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":391,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["next(err",{"_index":404,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["notfoundexception",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{}}}],["notfoundexception(\"user",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception('document",{"_index":273,"title":{},"body":{"controllers/BookController.html":{}}}],["npm",{"_index":564,"title":{},"body":{"index.html":{}}}],["number",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["oauth20",{"_index":547,"title":{},"body":{"dependencies.html":{}}}],["object.keys(e.keypattern",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["ocurred",{"_index":435,"title":{},"body":{"classes/FallbackExceptionFilter.html":{}}}],["optional",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"classes/ConfigService.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["out",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/ConfigModule.html":{},"overview.html":{}}}],["overview",{"_index":585,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":530,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":240,"title":{},"body":{"controllers/BookController.html":{}}}],["param('id",{"_index":271,"title":{},"body":{"controllers/BookController.html":{}}}],["parameters",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"classes/ConfigService.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["particular",{"_index":267,"title":{},"body":{"controllers/BookController.html":{}}}],["passport",{"_index":456,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":84,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":457,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":458,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["passwords",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["path",{"_index":254,"title":{},"body":{"controllers/BookController.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["payload",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":466,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":467,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["port",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":241,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["post('create",{"_index":207,"title":{},"body":{"controllers/BookController.html":{}}}],["post('create/image",{"_index":288,"title":{},"body":{"controllers/BookController.html":{}}}],["post('create/image')@useinterceptors(undefined",{"_index":232,"title":{},"body":{"controllers/BookController.html":{}}}],["post('login",{"_index":503,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["post('register",{"_index":490,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["prefix",{"_index":195,"title":{},"body":{"controllers/BookController.html":{},"controllers/authController.html":{}}}],["private",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookService.html":{},"classes/ConfigService.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["production",{"_index":573,"title":{},"body":{"index.html":{}}}],["promise",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookService.html":{},"injectables/LocalStrategy.html":{}}}],["properties",{"_index":176,"title":{},"body":{"interfaces/Book.html":{},"classes/ConfigService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["provide",{"_index":359,"title":{},"body":{"modules/ConfigModule.html":{}}}],["providers",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/ConfigModule.html":{},"overview.html":{}}}],["put",{"_index":242,"title":{},"body":{"controllers/BookController.html":{}}}],["put('update/:id",{"_index":228,"title":{},"body":{"controllers/BookController.html":{}}}],["randomname",{"_index":296,"title":{},"body":{"controllers/BookController.html":{}}}],["randomname}${extname(file.originalname",{"_index":301,"title":{},"body":{"controllers/BookController.html":{}}}],["readonly",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Book.html":{},"injectables/BookService.html":{},"classes/ConfigService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"interfaces/User.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["record",{"_index":369,"title":{},"body":{"classes/ConfigService.html":{}}}],["reflect",{"_index":551,"title":{},"body":{"dependencies.html":{}}}],["rehash",{"_index":394,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["req",{"_index":294,"title":{},"body":{"controllers/BookController.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["req.user",{"_index":511,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["request",{"_index":422,"title":{},"body":{"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["request.url",{"_index":438,"title":{},"body":{"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["required",{"_index":187,"title":{},"body":{"interfaces/Book.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":209,"title":{},"body":{"controllers/BookController.html":{}}}],["res.status(httpstatus.ok).json",{"_index":283,"title":{},"body":{"controllers/BookController.html":{}}}],["res.status(httpstatus.ok).json(document",{"_index":274,"title":{},"body":{"controllers/BookController.html":{}}}],["res.status(httpstatus.ok).json(documents",{"_index":264,"title":{},"body":{"controllers/BookController.html":{}}}],["res.status(httpstatus.ok).json(true",{"_index":278,"title":{},"body":{"controllers/BookController.html":{}}}],["reset",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/ConfigModule.html":{},"overview.html":{}}}],["response",{"_index":423,"title":{},"body":{"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["response.status(500).json",{"_index":428,"title":{},"body":{"classes/FallbackExceptionFilter.html":{}}}],["response.status(status).json",{"_index":446,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["result",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"interfaces/User.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result==null?false:true",{"_index":346,"title":{},"body":{"injectables/BookService.html":{}}}],["results",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"interfaces/User.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":257,"title":{},"body":{"controllers/BookController.html":{}}}],["return",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"classes/ConfigService.html":{},"classes/CreateUserDto.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"interfaces/User.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["returns",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"classes/ConfigService.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["rimraf",{"_index":554,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":568,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":556,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":398,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["schema",{"_index":83,"title":{},"body":{"modules/AuthModule.html":{},"modules/BookModule.html":{}}}],["secret",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":464,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["signoptions",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{}}}],["single",{"_index":343,"title":{},"body":{"injectables/BookService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"interfaces/User.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["src/.../book.model.ts",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":560,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.model.ts",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":486,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:16",{"_index":497,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["src/auth/auth.controller.ts:22",{"_index":491,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["src/auth/auth.controller.ts:29",{"_index":494,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["src/auth/auth.module.ts",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":498,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["src/auth/auth.service.ts",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:11",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:35",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:51",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/guard/auth.guard",{"_index":252,"title":{},"body":{"controllers/BookController.html":{}}}],["src/auth/guard/auth.guard.ts",{"_index":476,"title":{},"body":{"injectables/MyAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/auth.guard.ts:7",{"_index":479,"title":{},"body":{"injectables/MyAuthGuard.html":{}}}],["src/auth/jwt/jwt.strategy.ts",{"_index":448,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt/jwt.strategy.ts:16",{"_index":453,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt/jwt.strategy.ts:7",{"_index":451,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt/local.strategy.ts",{"_index":468,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt/local.strategy.ts:12",{"_index":472,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/jwt/local.strategy.ts:7",{"_index":470,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/book/book.controller.ts",{"_index":194,"title":{},"body":{"controllers/BookController.html":{},"coverage.html":{}}}],["src/book/book.controller.ts:17",{"_index":222,"title":{},"body":{"controllers/BookController.html":{}}}],["src/book/book.controller.ts:24",{"_index":219,"title":{},"body":{"controllers/BookController.html":{}}}],["src/book/book.controller.ts:31",{"_index":225,"title":{},"body":{"controllers/BookController.html":{}}}],["src/book/book.controller.ts:39",{"_index":216,"title":{},"body":{"controllers/BookController.html":{}}}],["src/book/book.controller.ts:47",{"_index":208,"title":{},"body":{"controllers/BookController.html":{}}}],["src/book/book.controller.ts:68",{"_index":233,"title":{},"body":{"controllers/BookController.html":{}}}],["src/book/book.controller.ts:79",{"_index":229,"title":{},"body":{"controllers/BookController.html":{}}}],["src/book/book.controller.ts:90",{"_index":213,"title":{},"body":{"controllers/BookController.html":{}}}],["src/book/book.module.ts",{"_index":320,"title":{},"body":{"modules/BookModule.html":{}}}],["src/book/book.service.ts",{"_index":322,"title":{},"body":{"injectables/BookService.html":{},"coverage.html":{}}}],["src/book/book.service.ts:11",{"_index":336,"title":{},"body":{"injectables/BookService.html":{}}}],["src/book/book.service.ts:17",{"_index":338,"title":{},"body":{"injectables/BookService.html":{}}}],["src/book/book.service.ts:23",{"_index":333,"title":{},"body":{"injectables/BookService.html":{}}}],["src/book/book.service.ts:29",{"_index":331,"title":{},"body":{"injectables/BookService.html":{}}}],["src/book/book.service.ts:34",{"_index":340,"title":{},"body":{"injectables/BookService.html":{}}}],["src/book/book.service.ts:40",{"_index":335,"title":{},"body":{"injectables/BookService.html":{}}}],["src/book/book.service.ts:7",{"_index":329,"title":{},"body":{"injectables/BookService.html":{}}}],["src/core/config/config.module.ts",{"_index":357,"title":{},"body":{"modules/ConfigModule.html":{}}}],["src/core/config/config.service",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{},"controllers/BookController.html":{},"injectables/JwtStrategy.html":{}}}],["src/core/config/config.service.ts",{"_index":364,"title":{},"body":{"classes/ConfigService.html":{},"coverage.html":{}}}],["src/core/config/config.service.ts:11",{"_index":371,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/core/config/config.service.ts:5",{"_index":367,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/core/filters/fallback.filter.ts",{"_index":414,"title":{},"body":{"classes/FallbackExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/fallback.filter.ts:7",{"_index":420,"title":{},"body":{"classes/FallbackExceptionFilter.html":{}}}],["src/core/filters/http.filter.ts",{"_index":440,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/http.filter.ts:7",{"_index":442,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/main.ts",{"_index":525,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/models/book.model",{"_index":250,"title":{},"body":{"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{}}}],["src/models/book.model.ts",{"_index":175,"title":{},"body":{"interfaces/Book.html":{},"classes/CreateBookDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/book.model.ts:20",{"_index":378,"title":{},"body":{"classes/CreateBookDto.html":{}}}],["src/models/book.model.ts:24",{"_index":380,"title":{},"body":{"classes/CreateBookDto.html":{}}}],["src/models/user.model",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["src/models/user.model.ts",{"_index":381,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/user.model.ts:21",{"_index":387,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/models/user.model.ts:22",{"_index":384,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/models/user.model.ts:23",{"_index":385,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/models/user.model.ts:24",{"_index":386,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["start",{"_index":569,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":572,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":574,"title":{},"body":{"index.html":{}}}],["started",{"_index":562,"title":{"index.html":{}},"body":{}}],["statements",{"_index":516,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["status",{"_index":444,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":429,"title":{},"body":{"classes/FallbackExceptionFilter.html":{}}}],["storage",{"_index":290,"title":{},"body":{"controllers/BookController.html":{}}}],["strategy",{"_index":455,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/Book.html":{},"classes/ConfigService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["successfully",{"_index":286,"title":{},"body":{"controllers/BookController.html":{}}}],["super",{"_index":459,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":582,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["svg",{"_index":583,"title":{},"body":{"modules.html":{}}}],["table",{"_index":529,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":528,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["test",{"_index":577,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":580,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":579,"title":{},"body":{"index.html":{}}}],["tests",{"_index":576,"title":{},"body":{"index.html":{}}}],["this._configservice.get('port",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["this.authservice.create(user",{"_index":507,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["this.authservice.login(req.user._doc",{"_index":505,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["this.authservice.validateusermongo(username",{"_index":475,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.bookservice.addnewdocument(body",{"_index":307,"title":{},"body":{"controllers/BookController.html":{}}}],["this.bookservice.addnewdocument(createdto",{"_index":282,"title":{},"body":{"controllers/BookController.html":{}}}],["this.bookservice.checkexistancebyid(id",{"_index":276,"title":{},"body":{"controllers/BookController.html":{}}}],["this.bookservice.deletedocument(id",{"_index":315,"title":{},"body":{"controllers/BookController.html":{}}}],["this.bookservice.getall",{"_index":263,"title":{},"body":{"controllers/BookController.html":{}}}],["this.bookservice.getbyid(id",{"_index":272,"title":{},"body":{"controllers/BookController.html":{}}}],["this.bookservice.updatedocumet(id",{"_index":312,"title":{},"body":{"controllers/BookController.html":{}}}],["this.configservice.get('app_uri')+':'+this.configservice.get('port",{"_index":305,"title":{},"body":{"controllers/BookController.html":{}}}],["this.envconfig",{"_index":375,"title":{},"body":{"classes/ConfigService.html":{}}}],["this.envconfig[key",{"_index":377,"title":{},"body":{"classes/ConfigService.html":{}}}],["this.jwtservice.sign(payload",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.model",{"_index":351,"title":{},"body":{"injectables/BookService.html":{}}}],["this.model(body",{"_index":348,"title":{},"body":{"injectables/BookService.html":{}}}],["this.model.find",{"_index":342,"title":{},"body":{"injectables/BookService.html":{}}}],["this.model.findbyid(id",{"_index":344,"title":{},"body":{"injectables/BookService.html":{}}}],["this.model.findbyidandremove(id",{"_index":354,"title":{},"body":{"injectables/BookService.html":{}}}],["this.usermodel(createuserdto",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel.findone",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{}}}],["timestamp",{"_index":436,"title":{},"body":{"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["timestamps",{"_index":189,"title":{},"body":{"interfaces/Book.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["title",{"_index":180,"title":{},"body":{"interfaces/Book.html":{},"classes/CreateBookDto.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["transformer",{"_index":538,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Book.html":{},"injectables/BookService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["type",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Book.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"classes/ConfigService.html":{},"classes/CreateBookDto.html":{},"classes/CreateUserDto.html":{},"classes/FallbackExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"interfaces/User.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typegoose",{"_index":543,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":483,"title":{},"body":{"injectables/MyAuthGuard.html":{}}}],["unauthorizedexception",{"_index":474,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unexpected",{"_index":434,"title":{},"body":{"classes/FallbackExceptionFilter.html":{}}}],["unique",{"_index":388,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":575,"title":{},"body":{"index.html":{}}}],["update",{"_index":308,"title":{},"body":{"controllers/BookController.html":{}}}],["updated",{"_index":313,"title":{},"body":{"controllers/BookController.html":{}}}],["updatedocument",{"_index":202,"title":{},"body":{"controllers/BookController.html":{}}}],["updatedocument(@res",{"_index":311,"title":{},"body":{"controllers/BookController.html":{}}}],["updatedocument(res",{"_index":226,"title":{},"body":{"controllers/BookController.html":{}}}],["updatedocumet",{"_index":327,"title":{},"body":{"injectables/BookService.html":{}}}],["updatedocumet(id",{"_index":339,"title":{},"body":{"injectables/BookService.html":{}}}],["uploadavatar",{"_index":203,"title":{},"body":{"controllers/BookController.html":{}}}],["uploadavatar(@res",{"_index":302,"title":{},"body":{"controllers/BookController.html":{}}}],["uploadavatar(res",{"_index":230,"title":{},"body":{"controllers/BookController.html":{}}}],["uploadedfile",{"_index":247,"title":{},"body":{"controllers/BookController.html":{}}}],["uploads/books",{"_index":292,"title":{},"body":{"controllers/BookController.html":{}}}],["uri",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["use",{"_index":399,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["usefactory",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":245,"title":{},"body":{"controllers/BookController.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["useguards(authguard('local",{"_index":502,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["useguards(myauthguard",{"_index":260,"title":{},"body":{"controllers/BookController.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["useguards(myauthguard)@get('getallwithpermission",{"_index":221,"title":{},"body":{"controllers/BookController.html":{}}}],["useguards(myauthguard)@get('profile",{"_index":493,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["useguards(undefined)@post('login",{"_index":496,"title":{},"body":{"controllers/authController.html":{},"controllers/authController-1.html":{}}}],["useinterceptors",{"_index":246,"title":{},"body":{"controllers/BookController.html":{}}}],["useinterceptors(fileinterceptor('image",{"_index":289,"title":{},"body":{"controllers/BookController.html":{}}}],["usenewurlparser",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":82,"title":{"interfaces/User.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"injectables/MyAuthGuard.html":{},"interfaces/User.html":{},"controllers/authController.html":{},"controllers/authController-1.html":{},"coverage.html":{}}}],["user's",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["user._id",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.ismodified('password",{"_index":396,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["user.password",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["user.username",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["usermodel",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{}}}],["username",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["userschema",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{},"classes/CreateUserDto.html":{},"interfaces/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema.methods.checkpassword",{"_index":406,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["userschema.pre('save",{"_index":389,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/User.html":{}}}],["usevalue",{"_index":360,"title":{},"body":{"modules/ConfigModule.html":{}}}],["using",{"_index":269,"title":{},"body":{"controllers/BookController.html":{}}}],["validate",{"_index":449,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":452,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":471,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateusermongo",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateusermongo(username",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationpipe",{"_index":244,"title":{},"body":{"controllers/BookController.html":{}}}],["validator",{"_index":184,"title":{},"body":{"interfaces/Book.html":{},"classes/CreateBookDto.html":{},"dependencies.html":{}}}],["value",{"_index":592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":526,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":589,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":570,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/ConfigModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller} from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n  constructor() {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBookModule\n\nBookModule\n\nAppModule -->\n\nBookModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BookModule\n                        \n                        \n                            ConfigModule\n                        \n                        \n                            ConfigModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AuthModule } from './auth/auth.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule } from './core/config/config.module';\nimport { ConfigService } from './core/config/config.service';\nimport { BookModule } from './book/book.module';\n\n\n@Module({\n  imports: [\n    ConfigModule,\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        uri: `mongodb+srv://${configService.get('DB_USER')}:${configService.get('DB_PWD')}@${configService.get('DB_URI')}/${configService.get('DB_NAME')}?${configService.get('DB_PARAMS')}`,\n        useNewUrlParser: true\n      }),\n      inject: [ConfigService]\n    }),\n\n    AuthModule,\n    ConfigModule,\n    BookModule,\n  ],\n  controllers: [AppController],\n  providers: [\n  ],\n})\nexport class AppModule {\n  static port: number | string;\n\n  constructor(private _configService: ConfigService) {\n    AppModule.port = this._configService.get('PORT');\n    console.log('AppModule.port', AppModule.port);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nConfigModule\n\nConfigModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nConfigModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            authController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ConfigModule } from './../core/config/config.module';\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './jwt/local.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './jwt/jwt.strategy';\nimport { authController } from './auth.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserSchema } from 'src/models/user.model';\nimport { ConfigService } from 'src/core/config/config.service';\n\n@Module({\n  imports: [\n    ConfigModule,\n    MongooseModule.forFeature([{ name: 'User', schema: UserSchema }]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: configService.get('EXPIRES_IN')\n        }\n      }),\n      inject: [ConfigService],\n    }),\n  ],  \n  controllers: [authController],\n  providers: [AuthService,LocalStrategy,JwtStrategy],\n  exports: [AuthService],\n  \n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUserMongo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDTO: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUserMongo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUserMongo(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { User } from 'src/models/user.model';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport * as bcrypt from 'bcrypt';\n\n\n@Injectable()\nexport class AuthService {\n\n  constructor(\n    private readonly jwtService: JwtService,\n    @InjectModel('User') private readonly userModel: Model,\n  ) { }\n\n  async validateUserMongo(username: string, password: string): Promise {\n    //checking if user exists\n    const user = await this.userModel.findOne({ username: username });\n    //if user does not exist throw NotFoundException\n    if(!user) throw new NotFoundException(\"User Not Found\")\n    //checking if the passwords matches \n    const match = await bcrypt.compare(password, user.password);\n    if (match) {\n      const { password, ...result } = user;\n      return result;\n    }else{\n      //passwords does not matches\n      throw new BadRequestException(\"Wrong Password\")\n    }\n  }\n\n  // create a user\n  async create(createUserDTO: any): Promise {\n    try {\n      const newUser = await this.userModel(createUserDTO);\n      let result = await newUser.save();\n      return result\n    } catch (e) {\n      if(e.code == 11000){\n        //duplication error\n        let keys = Object.keys(e.keyPattern)\n        throw new BadRequestException(`Sorry, it looks like that ${keys} is already taken.`)\n      }else{\n        throw e\n      }\n    }\n  }\n\n  async login(user: any): Promise {\n      // token generation\n    const payload = { username: user.username, sub: user._id };\n    // token generation\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Book.html":{"url":"interfaces/Book.html","title":"interface - Book","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Book\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/book.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _id\n                                \n                                \n                                        description\n                                \n                                \n                                        imageUrl\n                                \n                                \n                                        title\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageUrl\n                                    \n                                \n                                \n                                    \n                                        imageUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as mongoose from 'mongoose';\nimport { IsString, IsEmail, IsNotEmpty } from 'class-validator';\n\n\nexport const BookSchema = new mongoose.Schema({\n    title: { type: String, required : true},\n    description: { type: String, default: \"\" },\n    imageUrl: { type: String, default: \"\" },\n}, { timestamps: true });\n\nexport interface  Book extends mongoose.Document {\n    readonly _id  : string;\n    readonly title: string;\n    readonly description: string;\n    readonly imageUrl: string;\n}\n\nexport class CreateBookDto {\n    @IsString()\n    description: string;\n  \n    @IsString()\n    @IsNotEmpty()\n    title: string;\n  }\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BookController.html":{"url":"controllers/BookController.html","title":"controller - BookController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BookController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/book/book.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                book\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adddocument\n                            \n                            \n                                    Async\n                                deletedocument\n                            \n                            \n                                    Async\n                                documentExists\n                            \n                            \n                                    Async\n                                getAlldocument\n                            \n                            \n                                    Async\n                                getAlldocumentWithPermission\n                            \n                            \n                                    Async\n                                getdocument\n                            \n                            \n                                    Async\n                                updatedocument\n                            \n                            \n                                    Async\n                                uploadAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adddocument\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adddocument(res, createDto: CreateBookDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n            \n                \n                    Defined in src/book/book.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createDto\n                                    \n                                                CreateBookDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deletedocument\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deletedocument(res, id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete/:id')\n                \n            \n\n            \n                \n                    Defined in src/book/book.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            documentExists\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    documentExists(res, id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('check/:id')\n                \n            \n\n            \n                \n                    Defined in src/book/book.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAlldocument\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAlldocument(res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('getAll')\n                \n            \n\n            \n                \n                    Defined in src/book/book.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAlldocumentWithPermission\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAlldocumentWithPermission(res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(MyAuthGuard)@Get('getAllWithPermission')\n                \n            \n\n            \n                \n                    Defined in src/book/book.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getdocument\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getdocument(res, id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/book/book.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updatedocument\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updatedocument(res, id, createdocumentDTO: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('update/:id')\n                \n            \n\n            \n                \n                    Defined in src/book/book.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createdocumentDTO\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            uploadAvatar\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(res, file, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create/image')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/book/book.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { diskStorage } from 'multer';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { Controller, Get, Res, HttpStatus, Param, NotFoundException, Post, Body, Put, Delete, ValidationPipe, UseGuards, UseInterceptors, UploadedFile } from '@nestjs/common';\nimport { BookService } from './book.service';\nimport { CreateBookDto } from 'src/models/book.model';\nimport { MyAuthGuard } from 'src/auth/guard/auth.guard';\nimport { ConfigService } from 'src/core/config/config.service';\nimport { extname } from 'path';\n\n@Controller('book')\nexport class BookController {\n    constructor(private bookService: BookService,private configService : ConfigService) { }\n\n    // Retrieve documents list\n    @UseGuards(MyAuthGuard)\n    @Get('getAllWithPermission')\n    async getAlldocumentWithPermission(@Res() res) {\n        const documents = await this.bookService.getAll();\n        return res.status(HttpStatus.OK).json(documents);\n    }\n    \n    // Retrieve documents list\n    @Get('getAll')\n    async getAlldocument(@Res() res) {\n        const documents = await this.bookService.getAll();\n        return res.status(HttpStatus.OK).json(documents);\n    }\n\n    // Fetch a particular document using ID\n    @Get(':id')\n    async getdocument(@Res() res, @Param('id') id) {\n        const document = await this.bookService.getById(id);\n        if (!document) throw new NotFoundException('document does not exist!');\n        return res.status(HttpStatus.OK).json(document);\n    }\n\n    // Fetch a particular document using ID\n    @Get('check/:id')\n    async documentExists(@Res() res, @Param('id') id) {\n        const result = await this.bookService.checkExistanceById(id);\n        if (result == false) throw new NotFoundException('document does not exist!');\n        return res.status(HttpStatus.OK).json(true);\n    }\n\n    // add a document\n    @Post('create')\n    async adddocument(@Res() res, @Body(ValidationPipe) createDto: CreateBookDto) {\n        const document = await this.bookService.addNewDocument(createDto);\n        return res.status(HttpStatus.OK).json({\n            message: \"document has been created successfully\",\n            document\n        })\n    }\n\n    //add a document with image\n    @Post('create/image')\n    @UseInterceptors(FileInterceptor('image',\n        {\n            storage: diskStorage({\n                destination: './uploads/books',\n                filename: (req, file, cb) => {\n                    const randomName = Array(32).fill(null).map(() => (Math.round(Math.random() * 16)).toString(16)).join('')\n                    return cb(null, `${randomName}${extname(file.originalname)}`)\n                }\n            })\n        }\n    ))\n    async uploadAvatar(@Res() res, @UploadedFile() file,@Body() body) {\n        body.imageUrl = this.configService.get('APP_URI')+':'+this.configService.get('PORT')+'/'+ file.path\n        const document = await this.bookService.addNewDocument(body);\n        return res.status(HttpStatus.OK).json({\n            message: \"document has been created successfully\",\n            document\n        })\n    }\n\n    // Update a document's details\n    @Put('update/:id')\n    async updatedocument(@Res() res, @Param('id') id, @Body() createdocumentDTO: any) {\n        const document = await this.bookService.updateDocumet(id, createdocumentDTO);\n        if (!document) throw new NotFoundException('document does not exist!');\n        return res.status(HttpStatus.OK).json({\n            message: 'document has been successfully updated',\n            document\n        });\n    }\n\n    // Delete a document\n    @Delete('delete/:id')\n    async deletedocument(@Res() res, @Param('id') id) {\n        const document = await this.bookService.deleteDocument(id);\n        if (!document) throw new NotFoundException('document does not exist');\n        return res.status(HttpStatus.OK).json({\n            message: 'document has been deleted',\n            document\n        })\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BookModule.html":{"url":"modules/BookModule.html","title":"module - BookModule","body":"\n                   \n\n\n\n\n    Modules\n    BookModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BookModule\n\n\n\ncluster_BookModule_imports\n\n\n\ncluster_BookModule_providers\n\n\n\n\nConfigModule\n\nConfigModule\n\n\n\nBookModule\n\nBookModule\n\nBookModule -->\n\nConfigModule->BookModule\n\n\n\n\n\nBookService\n\nBookService\n\nBookModule -->\n\nBookService->BookModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/book/book.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BookController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ConfigModule } from './../core/config/config.module';\nimport { Module } from '@nestjs/common';\nimport { BookSchema } from 'src/models/book.model';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { BookService } from './book.service';\nimport { BookController } from './book.controller';\n\n@Module({\n    imports: [\n        MongooseModule.forFeature([{ name: 'Book', schema: BookSchema }]),\n        ConfigModule\n      ],\n    providers: [BookService],\n    controllers: [BookController],\n})\nexport class BookModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BookService.html":{"url":"injectables/BookService.html","title":"injectable - BookService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  BookService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/book/book.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addNewDocument\n                            \n                            \n                                    Async\n                                checkExistanceById\n                            \n                            \n                                    Async\n                                deleteDocument\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                updateDocumet\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(Model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/book/book.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        Model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addNewDocument\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addNewDocument(body: any)\n                \n            \n\n\n            \n                \n                    Defined in src/book/book.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkExistanceById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkExistanceById(id)\n                \n            \n\n\n            \n                \n                    Defined in src/book/book.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteDocument\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteDocument(id)\n                \n            \n\n\n            \n                \n                    Defined in src/book/book.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/book/book.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id)\n                \n            \n\n\n            \n                \n                    Defined in src/book/book.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateDocumet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDocumet(id, body: any)\n                \n            \n\n\n            \n                \n                    Defined in src/book/book.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Book, CreateBookDto } from 'src/models/book.model';\n\n@Injectable()\nexport class BookService {\n    constructor(@InjectModel('Book') private readonly Model: Model) { }\n\n    // fetch all documents\n    async getAll(): Promise {\n        const result = await this.Model.find();\n        return result;\n    }\n    \n    // Get a single Document\n    async getById(id): Promise {\n        const result = await this.Model.findById(id);\n        return result;\n    }\n\n    // Check if document exists\n    async checkExistanceById(id): Promise {\n        const result = await this.Model.findById(id);\n        return result==null?false:true;\n    }\n\n    // post a single document\n    async addNewDocument(body: any): Promise {\n        const newResult = await this.Model(body);\n        return newResult.save();\n    }\n    // Edit document details\n    async updateDocumet(id, body: any): Promise {\n        const result = await this.Model\n            .findByIdAndUpdate(id, body, { new: true });\n        return result;\n    }\n    // Delete a document\n    async deleteDocument(id): Promise {\n        const deletedResult = await this.Model.findByIdAndRemove(id);\n        return deletedResult;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigModule.html":{"url":"modules/ConfigModule.html","title":"module - ConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nConfigModule\n\nConfigModule\n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/config/config.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigService } from './config.service';\n\n@Module({\n  providers: [\n    {\n      provide: ConfigService,\n      useValue: new ConfigService(`${process.env.NODE_ENV || 'development'}.env`),\n  },\n  ],\n  exports: [ConfigService],\n})\nexport class ConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfigService.html":{"url":"classes/ConfigService.html","title":"class - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/config/config.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                envConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(filePath: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/config/config.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filePath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            envConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/config/config.service.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/config/config.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as dotenv from 'dotenv';\nimport * as fs from 'fs';\n\nexport class ConfigService {\n  private readonly envConfig: Record;\n\n  constructor(filePath: string) {\n    this.envConfig = dotenv.parse(fs.readFileSync(filePath))\n  }\n\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBookDto.html":{"url":"classes/CreateBookDto.html","title":"class - CreateBookDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBookDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/book.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/models/book.model.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/models/book.model.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import * as mongoose from 'mongoose';\nimport { IsString, IsEmail, IsNotEmpty } from 'class-validator';\n\n\nexport const BookSchema = new mongoose.Schema({\n    title: { type: String, required : true},\n    description: { type: String, default: \"\" },\n    imageUrl: { type: String, default: \"\" },\n}, { timestamps: true });\n\nexport interface  Book extends mongoose.Document {\n    readonly _id  : string;\n    readonly title: string;\n    readonly description: string;\n    readonly imageUrl: string;\n}\n\nexport class CreateBookDto {\n    @IsString()\n    description: string;\n  \n    @IsString()\n    @IsNotEmpty()\n    title: string;\n  }\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                firstName\n                            \n                            \n                                    Readonly\n                                lastName\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/models/user.model.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/models/user.model.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/models/user.model.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/models/user.model.ts:21\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import * as mongoose from 'mongoose';\nimport * as bcrypt from 'bcrypt';\n\n\nexport const UserSchema = new mongoose.Schema({\n    username: { type: String, unique : true , required : true},\n    firstName: { type: String, default: \"\" },\n    lastName: { type: String, default: \"\" },\n    password: String,\n}, { timestamps: true });\n\nexport interface  User extends mongoose.Document {\n    readonly _id  : string;\n    readonly username: string;\n    readonly firstName: string;\n    readonly lastName: string;\n    readonly password: string;\n}\n\nexport class  CreateUserDto {\n    readonly username: string;\n    readonly firstName: string;\n    readonly lastName: string;\n    readonly password: string;\n}\n\nUserSchema.pre('save', function (next) {\n    let user = this as any;\n    // Make sure not to rehash the password if it is already hashed\n    if (!user.isModified('password')) return next();\n    // Generate a salt and use it to hash the user's password\n    bcrypt.genSalt(10, (err, salt) => {\n        if (err) return next(err);\n        bcrypt.hash(user.password, salt, (err, hash) => {\n            if (err) return next(err);\n            user.password = hash;\n            next();\n        });\n    });\n});\n\nUserSchema.methods.checkPassword = function (attempt, callback) {\n    let user = this;\n    bcrypt.compare(attempt, user.password, (err, isMatch) => {\n        if (err) return callback(err);\n        callback(null, isMatch);\n    });\n};\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FallbackExceptionFilter.html":{"url":"classes/FallbackExceptionFilter.html","title":"class - FallbackExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FallbackExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/fallback.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/fallback.filter.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {ArgumentsHost, Catch, ExceptionFilter} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class FallbackExceptionFilter implements ExceptionFilter{\n\n    catch(exception: any, host: ArgumentsHost)  {\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        \n        return response.status(500).json({\n            statusCode: 500,\n            createdBy: \"FallbackExceptionFilter\",\n            errorMessage: exception.message ? exception.message : 'Unexpected error ocurred',\n             timestamp: new Date().toISOString(),\n            path: request.url,\n        })\n    }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http.filter.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter, HttpException } from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n\n    catch(exception: HttpException, host: ArgumentsHost) {\n\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status = exception.getStatus();\n\n\n        return response.status(status).json({\n            status: status,\n            createdBy: \"HttpExceptionFilter\",\n            errorMessage: exception.message.message,\n            timestamp: new Date().toISOString(),\n            path: request.url,\n        });\n    }\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from 'src/core/config/config.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private _configService: ConfigService) {    \n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: Boolean(_configService.get('IGNORE_EXPIRATION')),\n      secretOrKey: _configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: any) {\n    return { _id: payload.sub, username: payload.username };\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise {\n    const user = await this.authService.validateUserMongo(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MyAuthGuard.html":{"url":"injectables/MyAuthGuard.html","title":"injectable - MyAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MyAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/auth.guard.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleRequest\n                        \n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/auth.guard.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class MyAuthGuard extends AuthGuard('jwt') {\n\n  handleRequest(err, user, info: Error) {\n    if(info)\n    //Unauthorized\n     throw new HttpException(info.message, 401)\n     return user;\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _id\n                                \n                                \n                                        firstName\n                                \n                                \n                                        lastName\n                                \n                                \n                                        password\n                                \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as mongoose from 'mongoose';\nimport * as bcrypt from 'bcrypt';\n\n\nexport const UserSchema = new mongoose.Schema({\n    username: { type: String, unique : true , required : true},\n    firstName: { type: String, default: \"\" },\n    lastName: { type: String, default: \"\" },\n    password: String,\n}, { timestamps: true });\n\nexport interface  User extends mongoose.Document {\n    readonly _id  : string;\n    readonly username: string;\n    readonly firstName: string;\n    readonly lastName: string;\n    readonly password: string;\n}\n\nexport class  CreateUserDto {\n    readonly username: string;\n    readonly firstName: string;\n    readonly lastName: string;\n    readonly password: string;\n}\n\nUserSchema.pre('save', function (next) {\n    let user = this as any;\n    // Make sure not to rehash the password if it is already hashed\n    if (!user.isModified('password')) return next();\n    // Generate a salt and use it to hash the user's password\n    bcrypt.genSalt(10, (err, salt) => {\n        if (err) return next(err);\n        bcrypt.hash(user.password, salt, (err, hash) => {\n            if (err) return next(err);\n            user.password = hash;\n            next();\n        });\n    });\n});\n\nUserSchema.methods.checkPassword = function (attempt, callback) {\n    let user = this;\n    bcrypt.compare(attempt, user.password, (err, isMatch) => {\n        if (err) return callback(err);\n        callback(null, isMatch);\n    });\n};\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/authController.html":{"url":"controllers/authController.html","title":"controller - authController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  authController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                getProfile\n                            \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(MyAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Request, UseGuards, Post, Get, Body } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from 'src/auth/auth.service';\nimport { MyAuthGuard } from './guard/auth.guard';\nimport { CreateUserDto } from 'src/models/user.model';\n\n@Controller('auth')\n@Controller()\nexport class authController {\n  constructor(\n    private readonly authService: AuthService) {}\n\n  // POST : auth/register\n  @UseGuards(AuthGuard('local'))\n  @Post('login')\n  async login(@Request() req) {\n    return this.authService.login(req.user._doc);\n  }\n\n  // POST : auth/register\n  @Post('register')\n  async create(@Body() user :CreateUserDto) {\n     return this.authService.create(user);\n  }\n\n  // GET : auth/profile\n  @UseGuards(MyAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/authController-1.html":{"url":"controllers/authController-1.html","title":"controller - authController-1","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  authController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                getProfile\n                            \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(MyAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Request, UseGuards, Post, Get, Body } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from 'src/auth/auth.service';\nimport { MyAuthGuard } from './guard/auth.guard';\nimport { CreateUserDto } from 'src/models/user.model';\n\n@Controller('auth')\n@Controller()\nexport class authController {\n  constructor(\n    private readonly authService: AuthService) {}\n\n  // POST : auth/register\n  @UseGuards(AuthGuard('local'))\n  @Post('login')\n  async login(@Request() req) {\n    return this.authService.login(req.user._doc);\n  }\n\n  // POST : auth/register\n  @Post('register')\n  async create(@Body() user :CreateUserDto) {\n     return this.authService.create(user);\n  }\n\n  // GET : auth/profile\n  @UseGuards(MyAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            authController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            authController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/guard/auth.guard.ts\n            \n            injectable\n            MyAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/book/book.controller.ts\n            \n            controller\n            BookController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/book/book.service.ts\n            \n            injectable\n            BookService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/config/config.service.ts\n            \n            class\n            ConfigService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/filters/fallback.filter.ts\n            \n            class\n            FallbackExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/http.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/book.model.ts\n            \n            class\n            CreateBookDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/models/book.model.ts\n            \n            interface\n            Book\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/models/book.model.ts\n            \n            variable\n            BookSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/user.model.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/models/user.model.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/models/user.model.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^6.10.14\n        \n            @nestjs/config : ^0.5.0\n        \n            @nestjs/core : ^6.10.14\n        \n            @nestjs/jwt : ^6.1.1\n        \n            @nestjs/mongoose : ^6.3.1\n        \n            @nestjs/passport : ^6.1.1\n        \n            @nestjs/platform-express : ^6.10.14\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.12.2\n        \n            mongoose : ^5.8.10\n        \n            nestjs-typegoose : ^7.0.0\n        \n            passport : ^0.4.1\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.0\n        \n            rxjs : ^6.5.4\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BookModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BookModule\n\n\n\ncluster_BookModule_providers\n\n\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nBookModule\n\nBookModule\n\nAppModule -->\n\nBookModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAuthModule -->\n\nConfigModule->AuthModule\n\n\n\nBookModule -->\n\nConfigModule->BookModule\n\n\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nBookService\n\nBookService\n\nBookModule -->\n\nBookService->BookModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BookSchema   (src/.../book.model.ts)\n                        \n                        \n                            UserSchema   (src/.../user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/models/book.model.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BookSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n    title: { type: String, required : true},\n    description: { type: String, default: \"\" },\n    imageUrl: { type: String, default: \"\" },\n}, { timestamps: true })\n                        \n                    \n\n\n            \n        \n\n    src/models/user.model.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n    username: { type: String, unique : true , required : true},\n    firstName: { type: String, default: \"\" },\n    lastName: { type: String, default: \"\" },\n    password: String,\n}, { timestamps: true })\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
